
https://excalidraw.com/#room=682b2c5c9c5835bb3fd2,5KFxse5OeORDs3z__RSN_A
https://prod.liveshare.vsengsaas.visualstudio.com/join?32B6D1010755643A362F9697307257F573D7

📒 __________ TODO LIST __________ 📒

-	 [✅] Mostrar una entrada mientras esperas comando.
-	 [✅] Tener un historial funcional.
-	 [✅] Buscar y ejecutar basado en la variable PATH.
-	 [✅] Ejecutar mediante ruta relativa/absoluta (incluye minishell).
-  	 [❓] Evitar el uso más de 1 variable global para la recepción de una señal.
-	 [✅] No interpretar comillas sin cerrar, \ o ;.
-	 [✅] Gestionar que ' interprete metacaracteres dentro de la secuencia entre ""
-	 [✅] Gestionar que " interprete metacaracteres exceptuando el $.
4	 [  ] Implementación de redirecciones (<, >, <<, >>).
3	 [❓] Implementación de pipes (|).
		[  ] Redireciona pero acaba el proceso.
		[  ] No acepta argumentos entre comillas, hay que hacer clean_input.
-	 [✅] Expansión de variables de entorno.
-	 [✅] Gestión de $?.
2    [❓] Gestión de Ctrl-C, Ctrl-D y Ctrl-\, deben funcionar como bash.
	2.1	[❓] Ctrl-C (Imprime salto de linea), Ctrl-D (Termina SHELL) y Ctrl-\ (No hace nada).
	 [✅] Built-ins: echo (-n), cd (Rutas relativas/absolutas), pwd, export, unset, env y exit.
		[✅] Rutas absolutas (cd ~ funciona con /)
		[✅] Export revisarlo para sobreescribir variables (Planteamiento comentado en export.c)

📒 __________ NORMINETTE LIST __________ 📒

 📁 [❓] src
	-	 [✅] minishell.c
	-	 [✅] update_minishell.c
	-	 [  ] exec.c
	-	 [  ] path_utils.c
	-	 [  ] path.c
	-	 [  ] signals.c
	-	 [  ] variable_expansion.c
	 📁 [❓] parse
		-	 [❓] input_utils.c (muchas funciones)

-	 [  ] archivos
-	 [  ] archivos
-	 [  ] archivos
-	 [  ] archivos
-	 [  ] archivos
-	 [  ] archivos

ARREGLAR:
ls | wc -l | grep 9
echo prueba > a > b > c
mkdir a cd a mkdir b rm -rf a pwd

Formato -> [ORDEN] + 2 palabras (como máximo)
- GET
- SET
- EXIT
- VALID
- UPDATE

Tipos de errores para exit_status
- 0: Éxito
- 1: Error general
- 2: Error de sintaxis o uso incorrecto
- 126: El comando existe pero no es ejecutable
- 127: El comando no fue encontrado
- 128+n: El programa terminó debido a una señal n


PRIMER HIJO = 1759104
SEGUNDO HIJO = 

PRIMERA PIPE = 21447590
SEGUNDA PIPE = 

- Ver pipes: shell ls -l /proc/PID/fd
- Procesos que usan la pipe: lsof -nP | grep FD


📝 __________ GDB DEBUGGING GUIDE __________ 📝

FORK DEBUGGING:
- Start GDB: `gdb -tui ./minishell`
- Follow child process after fork: `set follow-fork-mode child`
- Set up before running: `set detach-on-fork off`
- Set initial breakpoints: `b ft_pipe` `b execute_cmd`
- Run program: `r`
- List all forked processes: `info inferiors`
- Switch between processes: `inferior num`
- Analyze pipes: `p minishell->pipe_tools.pipes[0]`
- Check FDs: `shell ls -l /proc/$(pid)/fd`
- Switch process: `inferior 2` (child process)

USEFUL VARIABLES TO WATCH:
- Process info: `p getpid()`
- Fork result: `p fork_pid`
- Pipe FDs: `p minishell->pipe_tools.pipes[0].read_pipe` `p minishell->pipe_tools.pipes[0].write_pipe`