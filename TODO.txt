https://excalidraw.com/#room=682b2c5c9c5835bb3fd2,5KFxse5OeORDs3z__RSN_A

https://prod.liveshare.vsengsaas.visualstudio.com/join?94B3E8A1C9D934695EEEAF50B59D1A369F29

ARREGLAR:

- EN GENERAL TENER EN CUENTA CODIGOS DE ERROR Y MENSAJES

/****************** CD *****************\
✅ cd -> cuando no tenemos HOME, al hacer cd "~" debe irse al HOME. Si HOME ya existe, lo agarra. Si no, coge el predeterminado.

/**************** EXPORT ***************\
❓ export GHOST=123 | env | grep GHOST -> parece no crear la variable
Este caso en concreto parecía que funcionaba al principio y ahora no (BASH)

/************* REDIRECTIONS ************\
✅ ls >"./outfiles/outfile""1""2""3""4""5"
/************* UNSET ************\
unset 1231 -> BASH: unset `1231': not a valid identifier

Tipos de errores para exit_status
- 0: Éxito
- 1: Error general
- 2: Error de sintaxis o uso incorrecto
- 126: El comando existe pero no es ejecutable
- 127: El comando no fue encontrado
- 128+n: El programa terminó debido a una señal n


📒 __________ TODO LIST __________ 📒

-	 [✅] Mostrar una entrada mientras esperas comando.
-	 [✅] Tener un historial funcional.
-	 [✅] Buscar y ejecutar basado en la variable PATH.
-	 [✅] Ejecutar mediante ruta relativa/absoluta (incluye minishell).
-  	 [ ❓] Evitar el uso más de 1 variable global para la recepción de una señal.
-	 [✅] No interpretar comillas sin cerrar, \ o ;.
-	 [✅] Gestionar que ' interprete metacaracteres dentro de la secuencia entre ""
-	 [✅] Gestionar que " interprete metacaracteres exceptuando el $.
4	 [  ] Implementación de redirecciones (<, >, <<, >>).
3	 [✅] Implementación de pipes (|).
		[✅] Redireciona pero acaba el proceso.
		[✅] No acepta argumentos entre comillas, hay que hacer clean_input.
-	 [✅] Expansión de variables de entorno.
-	 [✅] Gestión de $?.
2    [✅] Gestión de Ctrl-C, Ctrl-D y Ctrl-\, deben funcionar como bash.
	2.1	[✅] Ctrl-C (Imprime salto de linea), Ctrl-D (Termina SHELL) y Ctrl-\ (No hace nada).
	 [✅] Built-ins: echo (-n), cd (Rutas relativas/absolutas), pwd, export, unset, env y exit.
		[✅] Rutas absolutas (cd ~ funciona con /)
		[✅] Export revisarlo para sobreescribir variables (Planteamiento comentado en export.c)

📒 __________ NORMINETTE LIST __________ 📒

 📁 [❓] src
	-	 [✅] minishell.c
	-	 [✅] update_minishell.c
	-	 [  ] exec.c
	-	 [  ] path_utils.c
	-	 [  ] path.c
	-	 [  ] signals.c
	-	 [  ] variable_expansion.c
	 📁 [❓] parse
		-	 [❓] input_utils.c (muchas funciones)

-	 [  ] archivos
-	 [  ] archivos
-	 [  ] archivos
-	 [  ] archivos
-	 [  ] archivos
-	 [  ] archivos

✅ ""
✅ ''
✅ echo $
✅ exit 3456 -> deberia de salir con arg[1] % 256
✅ exit hola -> debería de salirse con el codigo 2 al hacer echo $?
✅ revisar funcionamiento de "wc < wc << pejjo"
✅ ls || wc
✅ wc < hola.txt < (redireccion abierta hay que manejarlo)
✅ NO SE SI MANEJAR -> cd - , se va al pwd anterior, y si lo vuelves a usar vuelve al anterior
✅ cd | exit -> NO deberia de salirse
✅"ls -> mensaje de quotes abiertas
✅ export a=, debería de exportar a=""
✅ export a, se duplica. Solo manejamos con =, pero sin = se acaba duplicando -> hemos hecho que si exporta "casa" se exporte como "casa=", valido?
✅ export cuando haces por ej; HOME+=perro sería como concatenarle perro
✅ export debe aceptar varias variables (si falla una, las demas se deben hacer)
✅ wc << EOF1 | grep hola << EOF2 -> actualmente wc sale a pantalla en lugar de la pipe
✅ export jojo y luego export jojo+=jiji, en declare_matrix se duplica, debería de existir solo jojo=jiji
✅ LIMPIAR CD, hay que reformularlo más legible y con más sentido (variables, funciones, etc.)
✅ cd -> cuando HOME no existe deberia dar "bash: cd: HOME not set"



📝 __________ GDB DEBUGGING GUIDE __________ 📝

FORK DEBUGGING:
- Start GDB: `gdb -tui ./minishell`
- Follow child process after fork: `set follow-fork-mode child`
- Set up before running: `set detach-on-fork off`
- Set initial breakpoints: `b ft_pipe` `b execute_cmd`
- Run program: `r`
- List all forked processes: `info inferiors`
- Switch between processes: `inferior num`
- Analyze pipes: `p minishell->pipe_tools.pipes[0]`
- Check FDs: `shell ls -l /proc/$(pid)/fd`
- Switch process: `inferior 2` (child process)

USEFUL VARIABLES TO WATCH:
- Process info: `p getpid()`
- Fork result: `p fork_pid`
- Pipe FDs: `p minishell->pipe_tools.pipes[0].read_pipe` `p minishell->pipe_tools.pipes[0].write_pipe`



Lista de excepciones con echo + redirecciones:

✅ [1] EJEMPLO: echo >hola
- BASH: Crea el archivo "hola" y lo deja vacío.
- MINISHELL: Crea el archivo "hola" y lo deja vacío.

✅ [2] EJEMPLO: echo ">hola"
- BASH: Imprime ">hola" en la salida estándar.
- MINISHELL: No imprime nada.

✅ [3] EJEMPLO: echo "hola >"
- BASH: Imprime "hola >" en la salida estándar.
- MINISHELL: Imprime "hola >" en la salida estándar.

✅ [4] EJEMPLO: echo "hola >" > archivo
- BASH: Crea el archivo "archivo" y le introduce "hola >".
- MINISHELL: Crea el archivo "archivo" y le introduce "hola >".

✅ [5] EJEMPLO: echo hola>
- BASH: bash: syntax error near unexpected token `newline'
- MINISHELL: minishell: syntax error near unexpected token `newline'

✅ [6] EJEMPLO: echo |jeje
- BASH: bash: jeje: command not found
- MINISHELL: minishell: jeje: command not found

✅ [7] EJEMPLO: echo "ho > la" | wc
- BASH: Devuelve 1 3 8, resultado de wc.
- MINISHELL: Devuelve 1 3 8, resultado de wc.

✅ [8] EJEMPLO: echo hola < TODO.txt
- BASH: Imprime "hola" en la salida estándar.
- MINISHELL: Imprime "hola" en la salida estándar.

✅ [9] EJEMPLO: echo hola << jeje
- BASH: Imprime "hola" en la salida estándar.
- MINISHELL: Imprime "hola" en la salida estándar.

✅ [10] EJEMPLO: echo ">" (también ">>", "<<" y "<")
- BASH: Imprime > en la salida estándar.
- MINISHELL: Imprime ">" en la salida estándar.

✅ [11] EJEMPLO: echo "|"
- BASH: Imprime | en la salida estándar.
- MINISHELL: Imprime | en la salida estándar.

✅ [12] EJEMPLO: echo <
- BASH: bash: syntax error near unexpected token `newline'
- MINISHELL: minishell: syntax error near unexpected token `newline'

✅ [13] EJEMPLO: echo >
- BASH: bash: syntax error near unexpected token `newline'
- MINISHELL: minishell: syntax error near unexpected token `newline'

✅ [14] EJEMPLO: echo |
- BASH: Abre un heredoc
- MINISHELL: minishell: syntax error cmd after pipe

/* ---------- TODO 22/05/2025 --------- */

✅ 1.- Si se ejecuta minishell sin variables de entorno debe estar controlado -> if (!env || !*env)

✅ 2.- Redir in debe redirigir el input independientemente de si está antes o después, si es el último debe hacerlo. Ejemplo: <archivo cat
✅| >
✅| <
✅| <<
✅| >>

✅3.- SHLVL debe aumentarse cuando ejecutas shell dentro de minishell
✅ Hay que implementarlo, función hecha con condición, ver el sitio

✅ 4.- ""''"" da segfault, """", ''''

✅ 5.- Si una carpeta se llama ls, al hacer ls ls, debe ejecutar el comando dentro de la carpeta, eso quiere decir que el comando tiene prioridad frente al archivo que esté en la ruta actual.

 touch cat
 chmod 755 cat
 cat file
Esto no hace cat del file, hay que asegurarse de que si el cmd no contiene "/" busque en el PATH

✅ 6.- cat saliendose con ctrl +c deberia de dar 130 en el echo $?

✅ 7.- cd algo, unset OLDPWD, cd - -> nos da segfault, debe escribir un mensaje que sea minishell: cd: OLDPWD not set
✅ ¿Se vuelve a setear OLDPWD al cambiar de directorio? SI

✅ 8.- Cuando hace exit sin arg, usa el ultimo codigo de salida. Con arg numerico el modulo del argumento de 256
❓ Chequear el resto de codigos de salida para ver si salen correctos

✅ 9.- < Makefile cat < popo debe redireccionar el archivo popo a cat, e imprime su contenido

✅ 10.- << popo cat << lala | cat << lala2 -> Deberia ser popo, lala y luego lala2, pero no funciona
❓ Probamos a hacerlo el 26/05 e iba bien, rarete

✅ ejecutarlo con ./leaks, es para ver fds abiertos y still reachables
❓ Aparentemente el unico still reachable es la estática de shell_prompt

✅ Al cerrar pipes los inputs parecen haberse trastocado

REVISADO NÚMERO FUNCIONES POR ARCHIVOS Y NORMINETTE

PROBLEMA CON EL INCLUDE EN TODOS LOS ARCHIVOS

/*------built-in-----*/

✅ ✅ built (2)
✅ ✅ft_cd (4) 
	✅ ✅cd_utils (5)
✅ ✅ echo (2)
✅ ✅ env (1)
✅ ✅ exit (3)
✅ ✅ export (2)
	✅ ✅export_cases (5)
	✅ ✅export_declare (3)
	✅ export_utils (5)
✅ ✅ pwd (1)
✅ ✅ unset (4)

/*--------MAIN--------*/

✅ ✅ minishell_utils.c (3)
✅ ✅ update_minishell (4)

/*------PARSE--------*/

✅ ✅ input.c (3)
✅ ✅ input_utils (4)
✅ ✅ prompt.c (2)
✅ ✅ is_redirection.c (4)
✅ ✅ split.c (5) 
✅ ✅ split_utils (5)
✅ ✅ path_utils (3)
✅ ✅ path (2)
✅ ✅ QUOTE_UTILS (2)
✅ ✅ expand_var (5)
✅ ✅ expand_redir (4)

/*-------REDIRECTION_UTILS--------*/

✅ ✅ fork_redir (3)
✅ ✅ pipe_libft (1)
✅ ✅ pipe_utils (3)
✅ ✅ redir_cmd_cleaner (2)
✅ ✅ fd_utils (5)

/*---------REDIRECTIONS-------------*/

✅ ✅ redir_in (4)
✅ ✅ redir_out (2)
✅ ✅ redir_pipe (2)
✅ ✅ redirect (3)
✅ ✅ redirect_utils (3)

/*-----------VALIDATIONS------------*/

✅ ✅ valid_cmd (2)
✅ ✅ valid_env_char (1)
✅ ✅ valid_rl_input (2)
✅ ✅ valid_symbols (1)
✅ ✅ valid_redir (5)


✅ exec (4)
✅ signals (2)